{"version":3,"sources":["components/persons.js","components/NewPersonForm.js","components/Filter.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["console","log","axios","get","id","delete","newPersonObject","post","changedPerson","put","NewPersonForm","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setMessage","setErrorMessage","onSubmit","event","preventDefault","name","number","find","person","window","confirm","personService","then","map","catch","error","setTimeout","response","concat","data","value","onChange","target","type","Filter","setNewSearch","filter","toLowerCase","includes","RemoveButton","onClick","removePerson","bruh","Content","map1","key","Message","message","className","Notification","errorMessage","App","useState","newSearch","useEffect","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa3718e0.chunk.js","sourcesContent":["\r\nimport axios from'axios'\r\n\r\nconst getAll = () => {\r\n    console.log(axios.get('https://immense-harbor-69467.herokuapp.com/api/persons'))\r\n    return axios.get('https://immense-harbor-69467.herokuapp.com/api/persons')\r\n}\r\n\r\nconst removePerson = (id) => {\r\n    axios.delete(`https://immense-harbor-69467.herokuapp.com/api/persons/${id}`)\r\n}\r\n\r\nconst postPersons = ({newPersonObject}) => {\r\n    return(axios.post('https://immense-harbor-69467.herokuapp.com/api/persons', newPersonObject))\r\n}\r\n\r\nconst replaceNumber = ({changedPerson}) =>{\r\n    return axios.put(`https://immense-harbor-69467.herokuapp.com/api/persons/${changedPerson.id}` , changedPerson)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    removePerson,\r\n    postPersons,\r\n    replaceNumber\r\n}","import React from 'react'\r\nimport personService from './persons'\r\n\r\n\r\n\r\nconst NewPersonForm = ({persons, setPersons,newName, setNewName, newNumber, setNewNumber, setMessage ,setErrorMessage}) =>{\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    console.log('button clicked')\r\n    const newPersonObject = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n\r\n    const changedPerson = persons.find(person => person.name === newName)\r\n    if (changedPerson)  {\r\n      if(window.confirm(`${newName} is already added to the phonebook, replace the old number with new one?`)){\r\n        changedPerson.number = newNumber\r\n        console.log(changedPerson)\r\n        personService.replaceNumber({changedPerson}).then(\r\n        setPersons(persons.map(person => person.id!==changedPerson.id ? person : changedPerson))\r\n        )\r\n        .catch(\r\n          error => {\r\n            setErrorMessage(`${newName} has already been removed from the server`)\r\n            setTimeout(() => {\r\n              setErrorMessage(null)\r\n            }, 3000)\r\n\r\n          }\r\n        )\r\n        setNewName('')\r\n        setNewNumber('')\r\n      }\r\n    }else{\r\n    personService.postPersons({newPersonObject})\r\n    .then(response => {\r\n      setPersons(persons.concat(response.data))\r\n      console.log(response.data)\r\n      setNewName('')\r\n      setNewNumber('')\r\n      console.log(persons)\r\n      console.log(response)\r\n      setMessage(`added ${newName}`)\r\n      setTimeout(()=> {\r\n      setMessage(null)\r\n    },3000 )\r\n    })\r\n    .catch((error) => {\r\n      console.log(error.response.data)\r\n      setErrorMessage(`${error.response.data.error}`)\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 3000)\r\n    })\r\n    }\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\nreturn(\r\n  <form onSubmit={addName}>\r\n  <div> name: <input \r\n    value = {newName} \r\n    onChange={handleNameChange}/> </div>\r\n    \r\n    <div> Number: <input \r\n      value = {newNumber}\r\n      onChange = {handleNumberChange} /> </div>\r\n   \r\n    <div>\r\n    <button type=\"submit\">add</button>\r\n  </div>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default NewPersonForm","import React from 'react'\r\n\r\n\r\nconst Filter = ({persons, setNewSearch}) => {\r\n  const HandleSearchChange = (event) =>{\r\n    setNewSearch(persons.filter(person => person.name.toLowerCase().includes(event.target.value.toLowerCase())))\r\n  }\r\n  const handleSubmit= (event) => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  return ( \r\n    <form onSubmit = {handleSubmit}> \r\n    <div>\r\n      search: \r\n       <input \r\n      onChange={\r\n        HandleSearchChange}/>\r\n    </div>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\nimport removePerson from './persons'\r\n\r\nconst RemoveButton = ({person, setPersons, persons}) => {\r\n  const handleClick=() =>{\r\n    console.log('button clicked', person)\r\n    if( window.confirm(`delete ${person.name}?`)){\r\n      removePerson.removePerson(person.id)\r\n      setPersons(persons.filter(bruh => bruh.id!== person.id))\r\n    }\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <button onClick ={handleClick}>delete</button>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Content = ({ persons , setPersons}) => {\r\n  const map1 = persons.map(person =>\r\n  <li key = {person.id}>\r\n    {person.name} {person.number} <RemoveButton person = {person} setPersons = {setPersons} persons = {persons}/>\r\n  </li>\r\n  )\r\n  return (\r\n    <div>\r\n        {map1}\r\n    </div>\r\n  )\r\n}\r\nexport default Content","import React, {useState, useEffect} from 'react'\r\nimport NewPersonForm from './components/NewPersonForm'\r\nimport Filter from './components/Filter'\r\nimport Content from './components/Content'\r\nimport personService from './components/persons'\r\n\r\nconst Message=({message})=>{\r\n  if(message === null){\r\nreturn null\r\n  }\r\n  return(\r\n    <div className = \"success\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Notification = ({errorMessage})=> {\r\n  if (errorMessage === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"error\">\r\n      {errorMessage}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ newSearch, setNewSearch ] = useState([])\r\n  const [ errorMessage, setErrorMessage ] = useState(null)\r\n  const [ message, setMessage ] = useState(null)\r\n\r\nuseEffect(() =>{\r\npersonService\r\n.getAll()\r\n.then(response =>{ \r\n  setPersons(response.data)\r\n})\r\n},[])\r\nuseEffect(()=> {\r\n  setNewSearch(persons)\r\n},[persons])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification errorMessage={errorMessage}/> <Message message={message}/>\r\n      <Filter persons = {persons} setNewSearch = {setNewSearch}/>\r\n      <h2>Add a new</h2>\r\n      <NewPersonForm persons = {persons} setPersons={setPersons} newName = {newName} setNewName={setNewName} newNumber = {newNumber} setNewNumber = {setNewNumber} setMessage={setMessage} setErrorMessage={setErrorMessage}  />\r\n      <h2>Numbers</h2>\r\n      <Content  persons = {newSearch} setPersons = {setPersons} setNewSearch = {setNewSearch} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}